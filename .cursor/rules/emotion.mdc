---
description: 
globs: 
alwaysApply: true
---
# Component Design Standards for Emotion

This document outlines the component design standards for Emotion, focusing on creating reusable, maintainable, and performant components within the Emotion ecosystem. It serves as a guide for developers and provides context for AI coding assistants.

## 1. Component Architecture

### 1.1. Atomic Design Principles

**Standard:** Embrace Atomic Design principles to create a scalable and maintainable component library.

*   **Why:** Atomic Design provides a structured approach to component creation, promoting reusability, consistency, and easier maintenance. It breaks down the UI into fundamental building blocks that can be combined to create more complex components.

*   **Do This:**
    *   Identify and create Atoms (smallest indivisible elements like buttons, inputs, labels).
    *   Combine Atoms into Molecules (simple groups of UI elements functioning as a unit, e.g., a search bar consisting of an input and a button).
    *   Assemble Molecules into Organisms (relatively complex sections of the UI, e.g., a product listing with image, title, and price).
    *   Compose Organisms into Templates (page-level layouts defining underlying content structure).
    *   Utilize Templates to construct Pages (specific instances of templates with representative content).

*   **Don't Do This:**
    *   Create monolithic components that handle too much logic or are difficult to reuse.
    *   Skip the atomic design process and directly create complex components, leading to inconsistencies and maintenance difficulties.

*   **Code Example:**

    """jsx
    // Atom: Button
    import styled from '@emotion/styled';

    const Button = styled.button"
      background-color: #4CAF50;
      border: none;
      color: white;
      padding: 10px 20px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 16px;
      cursor: pointer;
      border-radius: 5px;

      &:hover {
        background-color: #3e8e41;
      }
    ";

    export default Button;

    // Molecule: Search Bar
    import React from 'react';
    import styled from '@emotion/styled';
    import Button from './Button';

    const SearchBarContainer = styled.div"
      display: flex;
      align-items: center;
    ";

    const Input = styled.input"
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      margin-right: 10px;
      font-size: 16px;
    ";

    const SearchBar = () => {
      return (
        <SearchBarContainer>
          <Input type="text" placeholder="Search..." />
          <Button>Search</Button>
        </SearchBarContainer>
      );
    };

    export default SearchBar;
    """

### 1.2. Separation of Concerns

**Standard:** Practice a clear separation of concerns by dividing components into presentational and container components.  Consider also using hooks for more complex logic.

*   **Why:** Separating concerns improves code readability, testability, and reusability. Presentational components focus on UI rendering, while container components handle data fetching, state management, and business logic.

*   **Do This:**
    *   Create presentational components that receive data and callbacks via props and focus solely on rendering UI.
    *   Create container components that manage state, data fetching, and pass necessary data and callbacks to presentational components.
    *   Use hooks where relevant to extract complicated state logic.

*   **Don't Do This:**
    *   Mix data fetching and business logic within presentational components, making them difficult to test and reuse.
    *   Write overly complex container components that handle UI rendering logic.

*   **Code Example:**

    """jsx
    // Presentational Component: ProductCard.jsx
    import React from 'react';
    import styled from '@emotion/styled';

    const Card = styled.div"
      border: 1px solid #ccc;
      padding: 15px;
      margin: 10px;
      width: 200px;
      text-align: center;
    ";

    const Title = styled.h3"
      font-size: 18px;
      margin-bottom: 5px;
    ";

    const Price = styled.p"
      font-weight: bold;
    ";

    const ProductCard = ({ product }) => {
      return (
        <Card>
          <Title>{product.name}</Title>
          <Price>${product.price}</Price>
          <img src = {product.image} width = {150} height = {150} alt = {product.name} />
        </Card>
      );
    };

    export default ProductCard;

    // Container Component: ProductList.jsx
    import React, { useState, useEffect } from 'react';
    import ProductCard from './ProductCard';
    import styled from '@emotion/styled';

    const ProductListContainer = styled.div"
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
    ";

    const ProductList = () => {
      const [products, setProducts] = useState([]);

        useEffect(() => {
          const fetchProducts = async () => {
            try {
              const response = await fetch('https://fakestoreapi.com/products');
              const data = await response.json();
              setProducts(data);
            } catch (error) {
              console.error("Error fetching products:", error);
            }
          };

          fetchProducts();
        }, []);


      return (
        <ProductListContainer>
          {products.map((product) => (
            <ProductCard key={product.id} product={product} />
          ))}
        </ProductListContainer>
      );
    };

    export default ProductList;
    """

### 1.3. Using Emotion Themes

**Standard:** Utilize Emotion's theming capabilities to manage and apply consistent styling across your application

*   **Why:** Themes offer a centralized way to define and manage styles (colors, fonts, spacing, etc.). This approach ensures consistency, improves maintainability, and simplifies style updates across the application.

*   **Do This:**
    *   Define a theme object containing your style variables.
    *   Wrap your application with the "<ThemeProvider>" component.
    *   Access theme values within your styled components using the "theme" prop.

*   **Don't Do This:**
    *   Hardcode style values directly within styled components, making styling updates and consistency difficult to manage.
    *   Avoid defining a comprehensive theme object. Strive to capture all common styling attributes.

*   **Code Example:**

    """jsx
    // theme.js
    export const theme = {
      colors: {
        primary: '#007bff',
        secondary: '#6c757d',
        background: '#f8f9fa',
        text: '#212529',
      },
      fonts: {
        main: 'Arial, sans-serif',
        secondary: 'Helvetica, sans-serif',
      },
      spacing: {
        small: '8px',
        medium: '16px',
        large: '24px',
      },
    };

    // App.jsx
    import React from 'react';
    import { ThemeProvider } from '@emotion/react';
    import styled from '@emotion/styled';
    import { theme } from './theme';

    const AppContainer = styled.div"
      background-color: ${props => props.theme.colors.background};
      color: ${props => props.theme.colors.text};
      font-family: ${props => props.theme.fonts.main};
      padding: ${props => props.theme.spacing.medium};
    ";

    const Title = styled.h1"
      color: ${props => props.theme.colors.primary};
    ";

    const App = () => {
      return (
        <ThemeProvider theme={theme}>
          <AppContainer>
            <Title>My Styled Application</Title>
            <p>Using Emotion's theming capabilities.</p>
          </AppContainer>
        </ThemeProvider>
      );
    };

    export default App;
    """

## 2. Component Implementation

### 2.1. Consistent Styling Approach with "styled"

**Standard:** Use the "styled" API for creating styled components. This is the primary and recomended way to create components with Emotion.

*   **Why:** "styled" provides a clean and declarative approach to styling components, offering better readability and maintainability. It leverages tagged template literals for concise CSS-in-JS syntax. It is the primary way one should write Emotion, and avoids less feature-rich approaches.

*   **Do This:**
    *   Use "styled.componentName" to create styled components.
    *   Leverage template literals to define CSS rules.
    *   Use props to dynamically style components based on their state or context.

*   **Don't Do This:**
    *   Use inline styles directly within JSX elements, as this reduces maintainability and reusability.
    *   Overuse global selectors, which can lead to styling conflicts.

*   **Code Example:**

    """jsx
    import styled from '@emotion/styled';

    const PrimaryButton = styled.button"
      background-color: ${props => props.primary ? '#007bff' : '#fff'};
      color: ${props => props.primary ? '#fff' : '#007bff'};
      border: 1px solid #007bff;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;

      &:hover {
        background-color: ${props => props.primary ? '#0056b3' : '#e9ecef'};
      }
    ";

    const App = () => {
      return (
        <div>
          <PrimaryButton primary>Primary Button</PrimaryButton>
          <PrimaryButton>Secondary Button</PrimaryButton>
        </div>
      );
    };
    """

### 2.2. Dynamic Styles with Props

**Standard:** Utilize component props to dynamically style components based on their state or context.

*   **Why:** Dynamic styling enables creating versatile components that can adapt to various situations, enhancing reusability and flexibility.

*   **Do This:**
    *   Access props within styled component definitions to apply conditional styles.
    *   Use ternary operators or logical expressions to handle different styling scenarios.

*   **Don't Do This:**
    *   Overcomplicate prop-based styling with excessive conditional logic.
    *   Neglect to provide default values for props to avoid unexpected styling issues.

*   **Code Example:**

    """jsx
    import styled from '@emotion/styled';

    const StatusIndicator = styled.div"
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background-color: ${props => {
        switch (props.status) {
          case 'online':
            return 'green';
          case 'offline':
            return 'red';
          case 'idle':
            return 'yellow';
          default:
            return 'gray';
        }
      }};
    ";

    const App = () => {
      return (
        <div>
          <StatusIndicator status="online" />
          <StatusIndicator status="offline" />
          <StatusIndicator status="idle" />
          <StatusIndicator /> {/* Default: Gray */}
        </div>
      );
    };
    """

### 2.3. CSS Prop for Overrides (Use Sparingly)

**Standard:** Use the "css" prop for simple style overrides or one-off styling adjustments, but avoid relying on it for core component styling.

*   **Why:** The "css" prop provides a convenient way to apply ad-hoc styles to components without creating new styled components. However, overuse can lead to scattered styles and reduced maintainability.

*   **Do This:**
    *   Use the "css" prop for minor style adjustments that are specific to a particular instance of a component.
    *   Keep the styles within the "css" prop concise and focused on the specific override.

*   **Don't Do This:**
    *   Use the "css" prop for defining fundamental component styles; instead, use "styled" components.
    *   Overuse the "css" prop, leading to a lack of consistency and maintainability.

*   **Code Example:**

    """jsx
    import styled from '@emotion/styled';
    import { css } from '@emotion/react';

    const Button = styled.button"
      background-color: #007bff;
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;

      &:hover {
        background-color: #0056b3;
      }
    ";

    const App = () => {
      return (
        <div>
          <Button>Default Button</Button>
          <Button
            css={css"
              margin-left: 10px;
              font-size: 18px;
              background-color: #28a745;

              &:hover {
                background-color: #1e7e34;
              }
            "}
          >
            Custom Button
          </Button>
        </div>
      );
    };
    """

### 2.4. Composition and Inheritance

**Standard:** Combine Emotion components through composition and inheritance to create more complex and specialized components.

*   **Why:** Composition and inheritance promote code reuse and reduce duplication.  This also allows you to create highly customized components that can be shared.

*   **Do This:**
    *   Use component composition to combine simpler components into more complex ones.
    *   Use Emotion's "styled" API to extend existing styled components and override their styles.

*   **Don't Do This:**
    *   Create redundant components with overlapping functionality.
    *   Overuse inheritance, which can lead to complex and tightly coupled component hierarchies.

*   **Code Example:**

    """jsx
    import styled from '@emotion/styled';

    // Base Button
    const BaseButton = styled.button"
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
    ";

    // Primary Button (Inheritance)
    const PrimaryButton = styled(BaseButton)"
      background-color: #007bff;
      color: white;
      border: none;

      &:hover {
        background-color: #0056b3;
      }
    ";

    // Outlined Button (Inheritance)
    const OutlinedButton = styled(BaseButton)"
      background-color: transparent;
      color: #007bff;
      border: 1px solid #007bff;

      &:hover {
        background-color: #e9ecef;
      }
    ";

    // Button Group (Composition)
    const ButtonGroupContainer = styled.div"
      display: flex;
    ";

    const ButtonGroup = ({ children }) => {
      return <ButtonGroupContainer>{children}</ButtonGroupContainer>;
    };

    const App = () => {
      return (
        <div>
          <PrimaryButton>Primary</PrimaryButton>
          <OutlinedButton>Outlined</OutlinedButton>
          <ButtonGroup>
            <PrimaryButton>Save</PrimaryButton>
            <OutlinedButton>Cancel</OutlinedButton>
          </ButtonGroup>
        </div>
      );
    };
    """

### 2.5. Avoiding Global Styles (Generally)

**Standard:** Minimize the use of global styles in components to maintain encapsulation.  If you need global styles use the "Global" component provided by Emotion with intention.

*   **Why:** Global styles can lead to unintended side effects and styling conflicts across the application. Component-specific styles promote better encapsulation and maintainability.

*   **Do This:**
    *   Use component-specific styles whenever possible.
    *   If global styles are necessary, use them sparingly and with clear justification.

*   **Don't Do This:**
    *   Overuse global styles, leading to styling conflicts and reduced maintainability.
    *   Apply global styles indiscriminately.

*   **Code Example:**

    """jsx
    import styled from '@emotion/styled';
    import { Global, css } from '@emotion/react';

    const AppContainer = styled.div"
      padding: 20px;
    ";

    const Title = styled.h1"
      color: #333;
    ";

    const App = () => {
      return (
        <AppContainer>
          <Global
            styles={css"
              body {
                font-family: Arial, sans-serif;
                background-color: #f0f0f0;
              }
            "}
          />
          <Title>My Application</Title>
          <p>Component-specific styles.</p>
        </AppContainer>
      );
    };
    """

## 3. Performance Considerations

### 3.1. Minimizing Style Re-calculations

**Standard:** Strive to minimize style re-calculations by reducing unnecessary prop changes and optimizing component rendering.

*   **Why:** Excessive style re-calculations can negatively impact performance, especially in complex applications.

*   **Do This:**
    *   Use "React.memo" to prevent unnecessary re-renders of styled components.
    *   Avoid passing frequently changing props to styled components if they don't affect styling.
    *   Consider using the "useMemo" hook to memoize complex style calculations.

*   **Don't Do This:**
    *   Pass frequently changing props to styled components without considering their impact on performance.
    *   Rely on excessively complex style calculations within styled components.

*   **Code Example:**

    """jsx
    import styled from '@emotion/styled';
    import React, { memo } from 'react';

    const StyledButton = styled.button"
      background-color: ${props => props.primary ? '#007bff' : '#fff'};
      color: ${props => props.primary ? '#fff' : '#007bff'};
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
    ";

    const Button = memo(StyledButton);

    const App = () => {
      const [count, setCount] = React.useState(0);

      return (
        <div>
          <Button primary onClick={() => setCount(count + 1)}>
            Increment
          </Button>
          <p>Count: {count}</p>
        </div>
      );
    };
    """

### 3.2. Server-Side Rendering (SSR)

**Standard:** Implement server-side rendering (SSR) for improved initial page load performance and SEO.

*   **Why:** SSR delivers pre-rendered HTML to the client, improving perceived performance and enabling search engine crawlers to index the application content effectively.

*   **Do This:**
    *   Use frameworks like Next.js or Gatsby that provide built-in SSR support for Emotion.
    *   Follow the framework-specific guidelines for configuring Emotion for SSR.

*   **Don't Do This:**
    *   Neglect to implement SSR for performance-critical applications, missing out on significant rendering optimization.

### 3.3. Code Splitting

**Standard:** Use code splitting to reduce the initial JavaScript bundle size and improve load times using Dynamic imports.

*   **Why:** Code splitting reduces the amount of JavaScript the browser needs to download and parse initially. This is done by breaking up the application into smaller chunks that load on demand.

*   **Do This:**
    *   Use dynamic imports ("import()") to load components and modules asynchronously.
    *   Structure your application to facilitate code splitting by route or feature.
    *   Ensure that the core of your application loads first.

*   **Don't Do This:**
    *   Create unnecessarily large bundle sizes.
    *   Implement splitting for components that require immediate availability.

*   **Code Example:**

    """jsx
    import React, { Suspense } from 'react';
    import styled from '@emotion/styled';

    const LoadableComponent = React.lazy(() => import('./MyComponent'));

    const LoadingFallback = styled.div"
      text-align: center;
      padding: 20px;
      font-style: italic;
    ";

    const App = () => {
      return (
        <div>
          <Suspense fallback={<LoadingFallback>Loading...</LoadingFallback>}>
            <LoadableComponent />
          </Suspense>
        </div>
      );
    };

    export default App;
    """

### 3.4 Vendor Prefixing (Handled by Emotion)

**Standard:** Rely on Emotion's built-in vendor prefixing, and avoid manual prefixing.

*   **Why:** Emotion automatically handles vendor prefixing for CSS properties, ensuring compatibility across different browsers. Manual prefixing can lead to duplication and maintenance issues.

*   **Do This:**
    *   Write standard CSS properties without vendor prefixes.
    *   Trust Emotion to automatically add the necessary prefixes.

*   **Don't Do This:**
    *   Manually add vendor prefixes to CSS properties, leading to unnecessary code and potential inconsistencies.

## 4. Accessibility

### 4.1. Semantic HTML

**Standard:** Use semantic HTML elements as the foundation for styled components, providing inherent accessibility features.

*   **Why:** Semantic HTML elements (e.g., "<button>", "<input>", "<nav>", "<article>") provide built-in accessibility features such as proper keyboard navigation, screen reader support, and ARIA roles.

*   **Do This:**
    *   Use appropriate semantic HTML elements as the base for styled components.
    *   Avoid using generic elements (e.g., "<div>", "<span>") for interactive components where semantic alternatives exist.

*   **Don't Do This:**
    *   Use non-semantic elements for interactive components, reducing accessibility.
    *   Overuse "<div>" and "<span>" elements without considering semantic alternatives.

*   **Code Example:**

    """jsx
    import styled from '@emotion/styled';

    const StyledButton = styled.button"
      background-color: #007bff;
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
    ";

    const StyledNav = styled.nav"
      background-color: #f0f0f0;
      padding: 10px;
    ";

    const StyledLink = styled.a"
      color: #333;
      text-decoration: none;
      margin-right: 10px;
    ";

    const App = () => {
      return (
        <div>
          <StyledButton>Click Me</StyledButton>
          <StyledNav>
            <StyledLink href="#">Home</StyledLink>
            <StyledLink href="#">About</StyledLink>
            <StyledLink href="#">Contact</StyledLink>
          </StyledNav>
        </div>
      );
    };
    """

### 4.2. ARIA Attributes

**Standard:** Use ARIA attributes to enhance the accessibility of complex or custom components that lack native semantic equivalents.

*   **Why:** ARIA attributes provide additional information to assistive technologies, such as screen readers, enabling them to understand the purpose and behavior of non-standard UI elements.

*   **Do This:**
    *   Add ARIA attributes (e.g., "aria-label", "aria-describedby", "aria-hidden", "role") to components that require additional accessibility information.
    *   Ensure that ARIA attributes are used correctly and do not conflict with existing semantic attributes.

*   **Don't Do This:**
    *   Overuse ARIA attributes, as this can lead to unnecessary complexity.
    *   Use ARIA attributes incorrectly or redundantly.
    *   Fail to test ARIA attributes with assistive technologies to verify their effectiveness.

*   **Code Example:**

    """jsx
    import styled from '@emotion/styled';

    const StyledTooltip = styled.div"
      position: relative;
      display: inline-block;
    ";

    const TooltipText = styled.span"
      visibility: hidden;
      width: 120px;
      background-color: black;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 5px 0;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      margin-left: -60px;
      opacity: 0;
      transition: opacity 0.3s;

      ${StyledTooltip}:hover & {
        visibility: visible;
        opacity: 1;
      }
    ";

    const App = () => {
      return (
        <StyledTooltip aria-label="Tooltip Example">
          Hover Me
          <TooltipText>This is a tooltip</TooltipText>
        </StyledTooltip>
      );
    };
    """

### 4.3. Color Contrast

**Standard:** Ensure sufficient color contrast between text and background colors to meet accessibility guidelines.

*   **Why:** Insufficient color contrast can make it difficult for users with visual impairments to read text content.

*   **Do This:**
    *   Use online tools to verify that the color contrast meets WCAG (Web Content Accessibility Guidelines) standards.
    *   Provide alternative high-contrast themes for users with low vision.
    *   Avoid using color alone to convey important information.

*   **Don't Do This:**
    *   Use color combinations that provide insufficient contrast.
    *   Rely solely on color to differentiate elements.

## 5. Testing

### 5.1. Unit Tests

**Standard:** Write unit tests for individual components to ensure they render correctly and behave as expected.

*   **Why:** Unit tests provide confidence in component functionality and prevent regressions.

*   **Do This:**
    *   Use testing libraries like Jest and React Testing Library to write unit tests.
    *   Test component rendering with different props and states.
    *   Test component behavior in response to user interactions.

*   **Don't Do This:**
    *   Neglect to write unit tests for components, leading to potential bugs and regressions.
    *   Write incomplete or superficial unit tests that do not thoroughly test component functionality.

### 5.2. Integration Tests

**Standard:** Perform integration tests to ensure components work together correctly within the application context.

*   **Why:** Integration tests verify that components interact seamlessly and that data flows correctly between them.

*   **Do This:**
    *   Use tools like Cypress or Selenium to perform integration tests.
    *   Test component interactions within the application's overall structure.
    *   Test data flow between components and external services.

*   **Don't Do This:**
    *   Skip integration tests, leading to potential issues arising from component interactions.
    *   Neglect to test data flow between components and external services.

### 5.3. Visual Regression Tests

**Standard:** Implement visual regression tests to detect unintended visual changes in components.

*   **Why:** Visual regression tests help prevent accidental styling changes, ensuring consistent UI across different environments.

*   **Do This:**
    *   Use tools like Storybook and Chromatic to perform visual regression tests.
    *   Capture snapshots of component renderings and compare them against baseline images.
    *   Review and approve any visual changes before merging code.

*   **Don't Do This:**
    *   Neglect to perform visual regression tests, leading to potential UI inconsistencies.
    *   Approve visual changes without careful review, allowing unintended styling changes to slip through.
